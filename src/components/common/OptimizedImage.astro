---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'eager' | 'lazy';
  sizes?: string;
  priority?: boolean;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  loading = 'lazy',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  priority = false
} = Astro.props;

// Si es prioritaria (above-the-fold), usar eager loading
const actualLoading = priority ? 'eager' : loading;

// Solo intentar WebP si la imagen original es JPG o PNG
const shouldTryWebP = src.includes('.jpg') || src.includes('.jpeg') || src.includes('.png');
const webpSource = shouldTryWebP ? src.replace(/\.(jpg|jpeg|png)$/i, '.webp') : null;
---

{shouldTryWebP ? (
  <picture class={className}>
    <!-- WebP format si existe -->
    <source
      srcset={webpSource}
      type="image/webp"
      sizes={sizes}
    />
    <!-- Fallback original -->
    <img
      src={src}
      alt={alt}
      width={width}
      height={height}
      loading={actualLoading}
      decoding="async"
      sizes={sizes}
      class="w-full h-full object-cover"
    />
  </picture>
) : (
  <!-- Si ya es WebP o otro formato, usar img directamente -->
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={actualLoading}
    decoding="async"
    sizes={sizes}
    class={className}
  />
)}
