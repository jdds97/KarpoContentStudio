---
// Componente de calendario de disponibilidad usando Cally
import { FORM_OPTIONS } from '@/utils';
---

<div class="calendar-container bg-primary-white p-6 rounded-lg shadow-md">
  <!-- Header del calendario -->
  <div class="calendar-header mb-6">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-xl font-instrument text-primary-black">Calendario de Disponibilidad</h3>
      <div class="flex items-center space-x-3">
        <!-- Selector de área del estudio -->
        <select 
          id="studio-filter" 
          class="px-3 py-2 border border-secondary-lightgray rounded-md focus:outline-none focus:ring-2 focus:ring-primary-beige text-sm"
        >
          <option value="all">Todas las áreas</option>
          {FORM_OPTIONS.studioAreas.map((option) => (
            <option value={option.value}>{option.label}</option>
          ))}
        </select>
      </div>
    </div>
    
    <!-- Título del mes actual -->
    <div class="flex justify-between items-center mb-2">
      <h4 id="month-title" class="text-lg font-medium text-primary-black"></h4>
      <div id="calendar-status" class="text-sm text-primary-gray">
        Cargando calendario...
      </div>
    </div>
  </div>

  <!-- Calendario de Cally -->
  <div id="calendar-container" class="cally-calendar">
    <calendar-month id="cally-instance"></calendar-month>
  </div>
  
  <!-- Leyenda -->
  <div class="calendar-legend mt-6 grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
    <div class="flex items-center space-x-2">
      <div class="w-4 h-4 bg-green-200 border border-green-300 rounded"></div>
      <span class="text-primary-gray">Disponible</span>
    </div>
    <div class="flex items-center space-x-2">
      <div class="w-4 h-4 bg-yellow-200 border border-yellow-300 rounded"></div>
      <span class="text-primary-gray">Parcialmente ocupado</span>
    </div>
    <div class="flex items-center space-x-2">
      <div class="w-4 h-4 bg-red-200 border border-red-300 rounded"></div>
      <span class="text-primary-gray">Completamente ocupado</span>
    </div>
    <div class="flex items-center space-x-2">
      <div class="w-4 h-4 bg-gray-200 border border-gray-300 rounded"></div>
      <span class="text-primary-gray">Día pasado</span>
    </div>
  </div>
  
  <!-- Panel de detalles del día seleccionado -->
  <div id="day-details" class="mt-6 p-4 bg-primary-beige/20 rounded-lg hidden">
    <h4 class="font-medium text-primary-black mb-3">Detalles del día seleccionado</h4>
    <div id="day-details-content">
      <!-- Se llenará dinámicamente -->
    </div>
  </div>
</div>

<style>
  /* Estilos personalizados para Cally */
  .cally-calendar {
    font-family: inherit;
  }
  
  /* Personalizar el calendario completo */
  calendar-month {
    display: block;
    width: 100%;
  }
  
  /* Personalizar elementos específicos usando CSS parts */
  calendar-month::part(grid) {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.25rem;
    margin-bottom: 1rem;
  }
  
  calendar-month::part(weekday) {
    text-align: center;
    font-size: 0.875rem;
    font-weight: 500;
    color: #6b7280;
    padding: 0.5rem 0;
  }
  
  calendar-month::part(day) {
    aspect-ratio: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    cursor: pointer;
    border-radius: 0.375rem;
    border: 1px solid #e5e7eb;
    transition: all 0.15s ease-in-out;
    font-size: 0.875rem;
  }
  
  calendar-month::part(day):hover {
    background-color: rgba(240, 236, 228, 0.3);
  }
  
  calendar-month::part(day)[aria-current="date"] {
    border: 2px solid #000000;
    font-weight: 700;
  }
  
  calendar-month::part(day)[aria-selected="true"] {
    background-color: #000000;
    color: #ffffff;
  }
  
  calendar-month::part(day)[aria-disabled="true"] {
    background-color: #f3f4f6;
    border-color: #e5e7eb;
    color: #9ca3af;
    cursor: not-allowed;
  }
  
  /* Estilos para disponibilidad */
  calendar-month::part(day).day-available {
    background-color: #dcfce7;
    border-color: #bbf7d0;
    color: #166534;
  }
  
  calendar-month::part(day).day-partial {
    background-color: #fef3c7;
    border-color: #fde68a;
    color: #92400e;
  }
  
  calendar-month::part(day).day-occupied {
    background-color: #fecaca;
    border-color: #fca5a5;
    color: #991b1b;
  }
  
  calendar-month::part(day).day-past {
    background-color: #f3f4f6;
    border-color: #e5e7eb;
    color: #9ca3af;
    cursor: not-allowed;
  }
  
  .booking-indicator {
    position: absolute;
    bottom: 0.25rem;
    right: 0.25rem;
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 50%;
    background-color: currentColor;
    opacity: 0.6;
  }
</style>

<script>
  // Importar Cally en el cliente
  const loadCally = async () => {
    if (typeof window !== 'undefined') {
      await import('cally');
    }
  };
  
  class BookingCalendar {
    private callyInstance: HTMLElement | null;
    private currentDate: Date;
    private studioFilter: string;
    private calendarData: any;
    
    constructor() {
      this.currentDate = new Date();
      this.studioFilter = 'all';
      this.calendarData = {};
      this.callyInstance = null;
      this.init();
    }
    
    private async init() {
      try {
        // Cargar Cally dinámicamente
        await loadCally();
        
        // Esperar a que los custom elements estén definidos
        if (typeof customElements !== 'undefined') {
          await customElements.whenDefined('calendar-month');
        }
        
        this.setupCally();
        this.setupEventListeners();
        await this.loadCalendarData();
      } catch (error) {
        console.error('Error inicializando calendario:', error);
        this.showError('Error al cargar el calendario');
      }
    }
    
    private setupCally() {
      this.callyInstance = document.getElementById('cally-instance');
      if (!this.callyInstance) {
        console.error('No se encontró el elemento calendar-month');
        return;
      }
      
      // Configurar atributos del calendario
      this.callyInstance.setAttribute('locale', 'es-ES');
      this.callyInstance.setAttribute('first-day-of-week', '1'); // Lunes
      
      // Event listeners para Cally
      this.callyInstance.addEventListener('change', (e: any) => {
        if (e.detail && e.detail.value) {
          this.onDateSelected(new Date(e.detail.value));
        }
      });
      
      this.callyInstance.addEventListener('month-change', (e: any) => {
        if (e.detail) {
          this.currentDate = new Date(e.detail.year, e.detail.month, 1);
          this.loadCalendarData();
        }
      });
    }
    
    private setupEventListeners() {
      // Filtro de área del estudio
      const studioFilter = document.getElementById('studio-filter');
      if (studioFilter) {
        studioFilter.addEventListener('change', (e) => {
          const target = e.target as HTMLSelectElement;
          this.studioFilter = target.value;
          this.loadCalendarData();
        });
      }
    }
    
    private async loadCalendarData() {
      try {
        const year = this.currentDate.getFullYear();
        const month = this.currentDate.getMonth() + 1;
        
        this.updateStatus('Cargando disponibilidad...');
        
        const params = new URLSearchParams({
          year: year.toString(),
          month: month.toString(),
          studio_space: this.studioFilter
        });
        
        const response = await fetch(`/api/calendar/availability?${params}`);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
          this.calendarData = data;
          // Pequeño delay para asegurar que el DOM de Cally esté listo
          setTimeout(() => this.updateCalendarDisplay(), 100);
          this.updateStatus(`${data.monthName} ${data.year} - ${data.totalBookings} reservas`);
        } else {
          this.updateStatus('Error al cargar calendario');
        }
      } catch (error) {
        console.error('Error loading calendar data:', error);
        this.updateStatus('Error de conexión');
      }
    }
    
    private updateCalendarDisplay() {
      if (!this.calendarData.calendar || !this.callyInstance) {
        console.log('No hay datos del calendario o instancia de Cally');
        return;
      }
      
      console.log('Actualizando display del calendario con', this.calendarData.calendar.length, 'días');
      
      // Obtener todos los elementos de día en el calendario de Cally
      const dayElements = this.callyInstance.querySelectorAll('[part="day"]');
      console.log('Encontrados', dayElements.length, 'elementos de día');
      
      // Limpiar clases anteriores
      dayElements.forEach((dayEl: Element) => {
        const htmlEl = dayEl as HTMLElement;
        htmlEl.classList.remove('day-available', 'day-partial', 'day-occupied', 'day-past');
        const indicator = htmlEl.querySelector('.booking-indicator');
        if (indicator) indicator.remove();
      });
      
      // Aplicar estilos según disponibilidad
      this.calendarData.calendar.forEach((dayData: any) => {
        const date = new Date(dayData.date);
        const dayEl = this.findDayElement(date);
        
        if (!dayEl) return;
        
        if (dayData.isPast) {
          dayEl.classList.add('day-past');
        } else if (dayData.isCurrentMonth) {
          const availableSlots = dayData.availableSlots?.available || 0;
          const totalSlots = dayData.availableSlots?.total || 12;
          
          if (availableSlots === totalSlots) {
            dayEl.classList.add('day-available');
          } else if (availableSlots > 0) {
            dayEl.classList.add('day-partial');
          } else {
            dayEl.classList.add('day-occupied');
          }
          
          // Agregar indicador si hay reservas
          if (dayData.bookings && dayData.bookings.length > 0) {
            const indicator = document.createElement('div');
            indicator.className = 'booking-indicator';
            dayEl.style.position = 'relative';
            dayEl.appendChild(indicator);
          }
        }
      });
    }
    
    private findDayElement(date: Date): HTMLElement | null {
      if (!this.callyInstance) return null;
      
      const dayElements = this.callyInstance.querySelectorAll('[part="day"]');
      const targetDate = date.getDate();
      
      for (const dayEl of dayElements) {
        const button = dayEl.querySelector('button');
        if (button) {
          const dayText = button.textContent?.trim();
          if (dayText === targetDate.toString()) {
            // Verificar que sea del mes correcto comparando con aria-label o dataset
            const ariaLabel = button.getAttribute('aria-label');
            if (ariaLabel && ariaLabel.includes(date.getFullYear().toString())) {
              return dayEl as HTMLElement;
            }
          }
        }
      }
      
      return null;
    }
    
    private onDateSelected(date: Date) {
      const dateStr = date.toISOString().split('T')[0];
      const dayData = this.calendarData.calendar?.find((day: any) => day.date === dateStr);
      
      if (dayData) {
        this.showDayDetails(dayData);
      }
    }
    
    private showDayDetails(dayData: any) {
      const detailsPanel = document.getElementById('day-details');
      const detailsContent = document.getElementById('day-details-content');
      
      if (!detailsPanel || !detailsContent) return;
      
      const formattedDate = new Date(dayData.date).toLocaleDateString('es-ES', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      
      let html = `<h5 class="font-medium text-primary-black mb-2">${formattedDate}</h5>`;
      
      if (dayData.isPast) {
        html += `<p class="text-gray-500">Este día ya ha pasado.</p>`;
      } else if (!dayData.bookings || dayData.bookings.length === 0) {
        html += `<p class="text-green-600">✅ Día completamente disponible</p>`;
        html += `<p class="text-sm text-gray-600 mt-1">Horarios disponibles: 9:00 - 20:00</p>`;
        html += `<a href="/booking" class="inline-block mt-3 px-4 py-2 bg-primary-black text-white rounded-md hover:bg-primary-gray transition-colors">Hacer reserva</a>`;
      } else {
        html += `<div class="space-y-3">`;
        html += `<div><strong>Reservas existentes:</strong></div>`;
        
        dayData.bookings.forEach((booking: any) => {
          const statusColor = {
            pending: 'text-yellow-600',
            confirmed: 'text-green-600',
            cancelled: 'text-red-600',
            completed: 'text-blue-600'
          }[booking.status] || 'text-gray-600';
          
          html += `
            <div class="bg-white p-3 rounded-md border border-gray-200">
              <div class="flex justify-between items-start">
                <div>
                  <p class="font-medium">${booking.time} - ${booking.studio_space}</p>
                  <p class="text-sm text-gray-600">${booking.session_type}</p>
                  <p class="text-sm text-gray-500">${booking.client_name}</p>
                </div>
                <span class="${statusColor} text-sm font-medium capitalize">${booking.status}</span>
              </div>
            </div>
          `;
        });
        
        if (dayData.availableSlots?.available > 0) {
          html += `<div class="mt-3">`;
          html += `<strong>Horarios disponibles:</strong>`;
          html += `<p class="text-sm text-green-600 mt-1">${dayData.availableSlots.available} de ${dayData.availableSlots.total} espacios</p>`;
          html += `<a href="/booking" class="inline-block mt-2 px-4 py-2 bg-primary-black text-white rounded-md hover:bg-primary-gray transition-colors">Hacer reserva</a>`;
          html += `</div>`;
        }
        
        html += `</div>`;
      }
      
      detailsContent.innerHTML = html;
      detailsPanel.classList.remove('hidden');
    }
    
    private updateStatus(message: string) {
      const statusElement = document.getElementById('calendar-status');
      if (statusElement) {
        statusElement.textContent = message;
      }
    }
    
    private showError(message: string) {
      const statusElement = document.getElementById('calendar-status');
      if (statusElement) {
        statusElement.textContent = `❌ ${message}`;
        statusElement.style.color = '#dc2626';
      }
    }
  }
  
  // Inicializar calendario cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM cargado, inicializando calendario...');
    new BookingCalendar();
  });
</script>
